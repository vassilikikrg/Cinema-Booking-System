// <auto-generated />
using System;
using CinemaTicketBooking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CinemaTicketBooking.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20240115112930_DateAndTimeFieldInScreening")]
    partial class DateAndTimeFieldInScreening
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaTicketBooking.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_admin_1");

                    b.HasIndex("UserId");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.Property<string>("_3d")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("3d");

                    b.HasKey("Id")
                        .HasName("PK_cinema_1");

                    b.ToTable("cinemas");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.ContentAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_contentAdmin_1");

                    b.HasIndex("UserId");

                    b.ToTable("content_admin");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_customer_1");

                    b.HasIndex("UserId");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<int>("ContentAdminId")
                        .HasColumnType("int")
                        .HasColumnName("content_admin_id");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("director");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("summary");

                    b.HasKey("Id")
                        .HasName("PK_movie_1");

                    b.HasIndex("ContentAdminId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int")
                        .HasColumnName("number_of_seats");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("screening_id");

                    b.HasKey("Id")
                        .HasName("PK_reservation_1");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ScreeningId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<DateTime>("StartDateAndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_time");

                    b.HasKey("Id")
                        .HasName("PK_screening_1");

                    b.HasIndex("CinemaId");

                    b.HasIndex("MovieId");

                    b.ToTable("screenings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK_user_1");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Admin", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.User", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("admins_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.ContentAdmin", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.User", "User")
                        .WithMany("ContentAdmins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("content_admin_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Customer", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("customers_fk0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Movie", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.ContentAdmin", "ContentAdmin")
                        .WithMany("Movies")
                        .HasForeignKey("ContentAdminId")
                        .IsRequired()
                        .HasConstraintName("movies_fk0");

                    b.Navigation("ContentAdmin");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Reservation", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("reservations_fk1");

                    b.HasOne("CinemaTicketBooking.Models.Screening", "Screening")
                        .WithMany("Reservations")
                        .HasForeignKey("ScreeningId")
                        .IsRequired()
                        .HasConstraintName("reservations_fk0");

                    b.Navigation("Customer");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Screening", b =>
                {
                    b.HasOne("CinemaTicketBooking.Models.Cinema", "Cinema")
                        .WithMany("Screenings")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("screenings_fk1");

                    b.HasOne("CinemaTicketBooking.Models.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("screenings_fk0");

                    b.Navigation("Cinema");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Cinema", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.ContentAdmin", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.Screening", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("CinemaTicketBooking.Models.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ContentAdmins");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
